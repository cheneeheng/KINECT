/*******************************************************************************
 * Graph.h
 *
 *  Created on: Jan 11, 2017
 *      Author: chen
 *      Detail: A graph structure with edges and nodes.
 *     			Node list contains the nodes.
 *     			Edge list contains the edges in the form of a list.
 *     			([node1][node2][number of edges])
 *
 ******************************************************************************/

#ifndef GRAPH_H_
#define GRAPH_H_

#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <string>
#include <vector>

using namespace std;

class Graph
{

public:

Graph(
	string object_,
	int loc_int_,
	int sec_int_);
virtual ~Graph(){}

string GetObject() {return OBJECT;}
void SetObject(string object_) {OBJECT = object_;}

state_t GetActionState() {return action_state;}
void SetActionState(state_t x_) {action_state = x_;}

/*******************************************************************************
* Nodes
*******************************************************************************/

node_tt GetNode(
	int  idx_)
{
	if (idx_<node_list.size()) 	{ return node_list[idx_]; }
	else 						{ return {}; }
}

int SetNode(
	node_tt	node_)
{
	if (node_list.size() < node_.index+1)
	{
		node_list.resize(node_.index+1);
	}
	node_list[node_.index] = node_;
	return EXIT_SUCCESS;
}

int GetNumberOfNodes()
{
	return node_list.size();
}

vector<node_tt> GetNodeList()
{
	return node_list;
}

vector<Vector4d> GetCentroidList();

vector<int> GetSurfaceFlagList();

/******************************************************************************
* Edges
*****************************************************************************/

void addEmptyEdgeForNewNode(
	int	idx_);

// edge_list = [#loc1] [#loc2] [#edges] [#sec*#loc]
vector<vector<vector<edge_tt> > > GetListOfEdges()
{
	return edge_list;
}

edge_tt GetEdge(
	int n1_,
	int n2_,
	int edge_num_)
{
	return edge_list[n1_][n2_][edge_num_];
}

void SetEdge(
	int 	n1_,
	int 	n2_,
	int 	edge_num_,
	edge_tt edge_)
{
	edge_list[n1_][n2_][edge_num_] = edge_;
}

int GetEdgeCounter(
	unsigned int n1_,
	unsigned int n2_,
	unsigned int edge_num_)
{
	return edge_list[n1_][n2_][edge_num_].counter;
}

void SetEdgeCounter(
	unsigned int n1_,
	unsigned int n2_,
	unsigned int edge_num_,
	unsigned int x_)
{
	edge_list[n1_][n2_][edge_num_].counter += x_;
}

void GetEdgeMovementConstraint(
	unsigned int n1_,
	unsigned int n2_,
	unsigned int edge_num_,
	vector<int> &x_)
{
	x_ = edge_list[n1_][n2_][edge_num_].mov_const;
}

void SetEdgeMovementConstraint(
	unsigned int n1_,
	unsigned int n2_,
	unsigned int edge_num_,
	vector<int> x_)
{
	edge_list[n1_][n2_][edge_num_].mov_const = x_;
}

void GetEdgeLocMem(
	unsigned int n1_,
	unsigned int n2_,
	unsigned int edge_num_,
	vector<double> &x_)
{
	x_ = edge_list[n1_][n2_][edge_num_].loc_mem;
}

void SetEdgeLocMem(
	unsigned int n1_,
	unsigned int n2_,
	unsigned int edge_num_,
	vector<double> x_)
{
	edge_list[n1_][n2_][edge_num_].loc_mem = x_;
}

void GetEdgeSecMem(
	unsigned int n1_,
	unsigned int n2_,
	unsigned int edge_num_,
	vector<double> &x_)
{
	x_ = edge_list[n1_][n2_][edge_num_].sec_mem;
}

void SetEdgeSecMem(
	unsigned int n1_,
	unsigned int n2_,
	unsigned int edge_num_,
	vector<double> x_)
{
	edge_list[n1_][n2_][edge_num_].sec_mem = x_;
}

vector<double> GetEdgeSectorMap(
	unsigned int n1_,
	unsigned int n2_,
	unsigned int edge_num_)
{
	return edge_list[n1_][n2_][edge_num_].sector_map;
}

void SetEdgeSectorMap(
	unsigned int n1_,
	unsigned int n2_,
	unsigned int edge_num_,
	vector<double> x_)
{
	edge_list[n1_][n2_][edge_num_].sector_map = x_;
}

void GetEdGetan(
	unsigned int n1_,
	unsigned int n2_,
	unsigned int edge_num_,
	vector<Vector3d> &x_)
{
	x_ = edge_list[n1_][n2_][edge_num_].tan;
}

void SetEdGetan(
	unsigned int n1_,
	unsigned int n2_,
	unsigned int edge_num_,
	vector<Vector3d> x_)
{
	edge_list[n1_][n2_][edge_num_].tan = x_;
}

void GetEdgeNor(
	unsigned int n1_,
	unsigned int n2_,
	unsigned int edge_num_,
	vector<Vector3d> &x_)
{
	x_ = edge_list[n1_][n2_][edge_num_].nor;
}

void SetEdgeNor(
	unsigned int n1_,
	unsigned int n2_,
	unsigned int edge_num_,
	vector<Vector3d> x_)
{
	edge_list[n1_][n2_][edge_num_].nor = x_;
}


private:

int LOC_INT;
int SEC_INT;
string OBJECT; // what kind of action Set is being evaluated

vector<node_tt> node_list;
vector<vector<vector<edge_tt> > > edge_list;

state_t action_state;

};


#endif /* GRAPH_H_ */
